axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(nrow = 4)
)
return(density_residue)
}
#' @description
#' `density_plot_residue` makes a ggplot2 density plot based on a tibble
#'
#'
#' @param df, tibble with score column and mutation columns
#'
#' @return density plot object
#'
#' @examples density_plot_residue(df)
density_plot_residue <- function(df){
density_residue <- ggplot(df, aes(score, color=mutation, fill=mutation)) +
geom_density(alpha=0.1) +
theme_classic() +
labs(x="Score", y="Density", color="Mutation") +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(nrow = 4)
)
return(density_residue)
}
# Generate density plot per mutation
# ------------------------------------------------------------------------------
density_residue_data_set_1 <- density_plot_residue(data_set_1 )
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png")
#' @description
#' `density_plot_residue` makes a ggplot2 density plot based on a tibble
#'
#'
#' @param df, tibble with score column and mutation columns
#'
#' @return density plot object
#'
#' @examples density_plot_residue(df)
density_plot_residue <- function(df){
density_residue <- ggplot(df, aes(score, color=mutation, fill=mutation)) +
geom_density(alpha=0.1) +
theme_classic() +
labs(x="Score", y="Density") +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(nrow = 4),color=guide_legend(nrow = 4)
)
return(density_residue)
}
# Generate density plot per mutation
# ------------------------------------------------------------------------------
density_residue_data_set_1 <- density_plot_residue(data_set_1 )
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png")
#' @description
#' `density_plot_residue` makes a ggplot2 density plot based on a tibble
#'
#'
#' @param df, tibble with score column and mutation columns
#'
#' @return density plot object
#'
#' @examples density_plot_residue(df)
density_plot_residue <- function(df){
density_residue <- ggplot(df, aes(score, color=mutation, fill=mutation)) +
geom_density(alpha=0.1) +
theme_classic() +
labs(x="Score", y="Density") +
theme(
legend.position="bottom",
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(title = "Residue Mutated", nrow = 4),color=guide_legend(nrow = 4)
)
return(density_residue)
}
Generate density plots
# ------------------------------------------------------------------------------
density_data_set_1 <- density_plot(data_set_1, title="Score density plot for Data Set 1")
density_data_set_2 <- density_plot(data_set_2, title="Score density plot for Data Set 2")
density_data_set_3 <- density_plot(data_set_3, title="Score density plot for Data Set 3")
density_data_set_4 <- density_plot(data_set_4, title="Score density plot for Data Set 4")
# Generate density plot per mutation
# ------------------------------------------------------------------------------
density_residue_data_set_1 <- density_plot_residue(data_set_1 )
density_residue_data_set_2 <- density_plot_residue(data_set_2)
density_residue_data_set_3 <- density_plot_residue(data_set_3)
density_residue_data_set_4 <- density_plot_residue(data_set_4)
# Save density plots
# ------------------------------------------------------------------------------
ggsave(plot = density_data_set_1, "./doc/density_plots/density_data_set_1.png")
ggsave(plot = density_data_set_2, "./doc/density_plots/density_data_set_2.png")
ggsave(plot = density_data_set_3, "./doc/density_plots/density_data_set_3.png")
ggsave(plot = density_data_set_4, "./doc/density_plots/density_data_set_4.png")
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png")
ggsave(plot = density_residue_data_set_2, "./doc/density_plots/density_residue_data_set_2.png")
ggsave(plot = density_residue_data_set_3, "./doc/density_plots/density_residue_data_set_3.png")
ggsave(plot = density_residue_data_set_4, "./doc/density_plots/density_residue_data_set_4.png")
#' @description
#' `density_plot_residue` makes a ggplot2 density plot based on a tibble
#'
#'
#' @param df, tibble with score column and mutation columns
#'
#' @return density plot object
#'
#' @examples density_plot_residue(df)
density_plot_residue <- function(df){
density_residue <- ggplot(df, aes(score, color=mutation, fill=mutation)) +
geom_density(alpha=0.1) +
theme_classic() +
labs(x="Score", y="Density") +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(title = "Residue Mutated", nrow = 4), color=guide_legend(title = "Residue Mutated",nrow = 4)
)
return(density_residue)
}
ggsave(plot = density_data_set_1, "./doc/density_plots/density_data_set_1.png", width = 4, height = 3, dpi=300)
ggsave(plot = density_data_set_2, "./doc/density_plots/density_data_set_2.png", width = 4, height = 3, dpi=300)
ggsave(plot = density_data_set_3, "./doc/density_plots/density_data_set_3.png", width = 4, height = 3, dpi=300)
ggsave(plot = density_data_set_4, "./doc/density_plots/density_data_set_4.png", width = 4, height = 3, dpi=300)
# Save density plots
# ------------------------------------------------------------------------------
ggsave(plot = density_data_set_1, "./doc/density_plots/density_data_set_1.png", width = 6, height = 5, dpi=300)
# Save density plots
# ------------------------------------------------------------------------------
ggsave(plot = density_data_set_1, "./doc/density_plots/density_data_set_1.png", width = 7, height = 5, dpi=300)
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 8, height = 5, dpi=300)
#' @description
#' `density_plot_residue` makes a ggplot2 density plot based on a tibble
#'
#'
#' @param df, tibble with score column and mutation columns
#'
#' @return density plot object
#'
#' @examples density_plot_residue(df)
density_plot_residue <- function(df){
density_residue <- ggplot(df, aes(score, color=mutation, fill=mutation)) +
geom_density(alpha=0.1) +
theme_classic() +
labs(x="Score", y="Density") +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(title = "Residue Mutated", nrow = 4), color=guide_legend(title = "Residue Mutated",nrow = 4)
)
return(density_residue)
}
# Generate density plot per mutation
# ------------------------------------------------------------------------------
density_residue_data_set_1 <- density_plot_residue(data_set_1)
# Generate density plot per mutation
# ------------------------------------------------------------------------------
density_residue_data_set_1 <- density_plot_residue(data_set_1, title="Score density plot for Data Set 1")
density_residue <- ggplot(df, aes(score, color=mutation, fill=mutation)) +
geom_density(alpha=0.1) +
theme_classic() +
labs(x="Score", y="Density",title="Score density plof scores per residue mutated") +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(title = "Residue Mutated", nrow = 4), color=guide_legend(title = "Residue Mutated",nrow = 4)
)
#' @description
#' `density_plot_residue` makes a ggplot2 density plot based on a tibble
#'
#'
#' @param df, tibble with score column and mutation columns
#'
#' @return density plot object
#'
#' @examples density_plot_residue(df)
density_plot_residue <- function(df){
density_residue <- ggplot(df, aes(score, color=mutation, fill=mutation)) +
geom_density(alpha=0.1) +
theme_classic() +
labs(x="Score", y="Density",title="Score density plof scores per residue mutated") +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(title = "Residue Mutated", nrow = 4), color=guide_legend(title = "Residue Mutated",nrow = 4)
)
return(density_residue)
}
# Generate density plot per mutation
# ------------------------------------------------------------------------------
density_residue_data_set_1 <- density_plot_residue(data_set_1)
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 8, height = 5, dpi=300)
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 10, height = 5, dpi=300)
# 04_density_plots.R
# ------------------------------------------------------------------------------
print('04_density_plots.R -> density plotting data')
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
library("ggplot2")
library("UniprotR")
# Define functions
# ------------------------------------------------------------------------------
source(file = "./R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
data_set_1 <- read_tsv(file = "./data/03_aug_data_set_1.tsv")
data_set_2 <- read_tsv(file = "./data/03_aug_data_set_2.tsv")
data_set_3 <- read_tsv(file = "./data/03_aug_data_set_3.tsv")
data_set_4 <- read_tsv(file = "./data/03_aug_data_set_4.tsv")
# Generate density plots
# ------------------------------------------------------------------------------
density_data_set_1 <- density_plot(data_set_1, title="Score density plot for Data Set 1")
density_data_set_2 <- density_plot(data_set_2, title="Score density plot for Data Set 2")
density_data_set_3 <- density_plot(data_set_3, title="Score density plot for Data Set 3")
density_data_set_4 <- density_plot(data_set_4, title="Score density plot for Data Set 4")
# Generate density plot per mutation
# ------------------------------------------------------------------------------
density_residue_data_set_1 <- density_plot_residue(data_set_1)
density_residue_data_set_2 <- density_plot_residue(data_set_2)
density_residue_data_set_3 <- density_plot_residue(data_set_3)
density_residue_data_set_4 <- density_plot_residue(data_set_4)
# Save density plots
# ------------------------------------------------------------------------------
ggsave(plot = density_data_set_1, "./doc/density_plots/density_data_set_1.png", width = 7, height = 5, dpi=300)
ggsave(plot = density_data_set_2, "./doc/density_plots/density_data_set_2.png", width = 7, height = 5, dpi=300)
ggsave(plot = density_data_set_3, "./doc/density_plots/density_data_set_3.png", width = 7, height = 5, dpi=300)
ggsave(plot = density_data_set_4, "./doc/density_plots/density_data_set_4.png", width = 7, height = 5, dpi=300)
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 10, height = 5, dpi=300)
ggsave(plot = density_residue_data_set_2, "./doc/density_plots/density_residue_data_set_2.png", width = 10, height = 5, dpi=300)
ggsave(plot = density_residue_data_set_3, "./doc/density_plots/density_residue_data_set_3.png", width = 10, height = 5, dpi=300)
ggsave(plot = density_residue_data_set_4, "./doc/density_plots/density_residue_data_set_4.png", width = 10, height = 5, dpi=300)
## Example dataset 1 - data overview
<div class="columns-2">
![Density plot of score](density_plots/density_data_set_1.png){width=80%}
<p class="forceBreak"></p>
![Density plot of score per residue](density_plots/density_residue_data_set_1.png){width=110%}
</div>
## Example dataset 1 - data overview
<div class="columns-2">
![Density plot of score per residue](density_plots/density_residue_data_set_1.png){width=120%}
<p class="forceBreak"></p>
![Density plot of score](density_plots/density_data_set_1.png){width=80%}
</div>
## Example dataset 1 - data overview
<div class="columns-2">
![](density_plots/density_data_set_1.png){width=100%}
<p class="forceBreak">
![](density_plots/density_residue_data_set_1.png){width=100%}
</p>
</div>
## Example dataset 1 - data overview
<div class="columns-2">
![](density_plots/density_data_set_1.png){width=100%}
<p class="forceBreak">
</p>
![](density_plots/density_residue_data_set_1.png){width=120%}
</div>
<div class="columns-2">
![](density_plots/density_data_set_1.png){width=80%}
<p class="forceBreak">
</p>
![](density_plots/density_residue_data_set_1.png){width=100%}
</div>
#' @description
#' `density_plot_residue` makes a ggplot2 density plot based on a tibble
#'
#'
#' @param df, tibble with score column and mutation columns
#'
#' @return density plot object
#'
#' @examples density_plot_residue(df)
density_plot_residue <- function(df){
density_residue <- ggplot(df, aes(score, color=mutation, fill=mutation)) +
geom_density(alpha=0.1) +
theme_classic() +
labs(x="Score", y="Density",title="Score density plof scores per residue mutated") +
theme(
legend.position = "bottom",
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
) +
guides(fill = guide_legend(title = "Residue Mutated", nrow = 4), color=guide_legend(title = "Residue Mutated",nrow = 4)
)
return(density_residue)
}
# Generate density plot per mutation
# ------------------------------------------------------------------------------
density_residue_data_set_1 <- density_plot_residue(data_set_1)
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 10, height = 5, dpi=300)
density_residue_data_set_1 <- density_plot_residue(data_set_1)
density_residue_data_set_2 <- density_plot_residue(data_set_2)
density_residue_data_set_3 <- density_plot_residue(data_set_3)
density_residue_data_set_4 <- density_plot_residue(data_set_4)
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 7, height = 5, dpi=300)
ggsave(plot = density_residue_data_set_2, "./doc/density_plots/density_residue_data_set_2.png", width = 7, height = 5, dpi=300)
ggsave(plot = density_residue_data_set_3, "./doc/density_plots/density_residue_data_set_3.png", width = 7, height = 5, dpi=300)
ggsave(plot = density_residue_data_set_4, "./doc/density_plots/density_residue_data_set_4.png", width = 7, height = 5, dpi=300)
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 7, height = 7, dpi=300)
ggsave(plot = density_residue_data_set_2, "./doc/density_plots/density_residue_data_set_2.png", width = 7, height = 7, dpi=300)
ggsave(plot = density_residue_data_set_3, "./doc/density_plots/density_residue_data_set_3.png", width = 7, height = 7, dpi=300)
ggsave(plot = density_residue_data_set_4, "./doc/density_plots/density_residue_data_set_4.png", width = 7, height = 7, dpi=300)
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 7, height = 6, dpi=300)
ggsave(plot = density_residue_data_set_2, "./doc/density_plots/density_residue_data_set_2.png", width = 7, height = 6, dpi=300)
ggsave(plot = density_residue_data_set_3, "./doc/density_plots/density_residue_data_set_3.png", width = 7, height = 6, dpi=300)
ggsave(plot = density_residue_data_set_4, "./doc/density_plots/density_residue_data_set_4.png", width = 7, height = 6, dpi=300)
# Save density plots per mutation
# ------------------------------------------------------------------------------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 7, height = 6.2, dpi=300)
ggsave(plot = density_residue_data_set_4, "./doc/density_plots/density_residue_data_set_4.png", width = 7, height = 6.25, dpi=300)
-----------
ggsave(plot = density_residue_data_set_1, "./doc/density_plots/density_residue_data_set_1.png", width = 7, height = 6.25, dpi=300)
ggsave(plot = density_residue_data_set_2, "./doc/density_plots/density_residue_data_set_2.png", width = 7, height = 6.25, dpi=300)
ggsave(plot = density_residue_data_set_3, "./doc/density_plots/density_residue_data_set_3.png", width = 7, height = 6.25, dpi=300)
ggsave(plot = density_residue_data_set_4, "./doc/density_plots/density_residue_data_set_4.png", width = 7, height = 6.25, dpi=300)
density <- ggplot(df, aes(score)) +
geom_density(alpha=0.4, fill="lightblue") +
ggtitle(title) +
labs(x="Score", y="Density",color="Score") +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000"),
legend.position = c(0.7, 0.223)) +
guides(fill = guide_legend(ncol = 5))
# 04_density_plots.R
# ------------------------------------------------------------------------------
print('04_geatmaps.R -> plotting heatmaps')
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
library("ggplot2")
library("UniprotR")
# Define functions
# ------------------------------------------------------------------------------
source(file = "./R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
data_set_1 <- read_tsv(file = "./data/03_aug_data_set_1.tsv")
data_set_2 <- read_tsv(file = "./data/03_aug_data_set_2.tsv")
data_set_3 <- read_tsv(file = "./data/03_aug_data_set_3.tsv")
data_set_4 <- read_tsv(file = "./data/03_aug_data_set_4.tsv")
# Score heatmaps
# ------------------------------------------------------------------------------
heatmap_data_set_score_1 <- heatmap_score(data_set_1, score_min = 0, score_max = 1.5)
heatmap_data_set_score_2 <- heatmap_score(data_set_2, score_min = 1, score_max = 10)
heatmap_data_set_score_3 <- heatmap_score(data_set_3, score_min = 0, score_max = 1)
heatmap_data_set_score_4 <- heatmap_score(data_set_4, score_min = -2, score_max = 2)
# Save heatmaps
# ------------------------------------------------------------------------------
ggsave(plot = heatmap_data_set_score_1, "./doc/heatmaps/heatmap_data_set_score_1.png",width = 10, height = 3, dpi=300)
ggsave(plot = heatmap_data_set_score_2, "./doc/heatmaps/heatmap_data_set_score_2.png",width = 10, height = 3, dpi=300)
ggsave(plot = heatmap_data_set_score_3, "./doc/heatmaps/heatmap_data_set_score_3.png",width = 10, height = 3, dpi=300)
ggsave(plot = heatmap_data_set_score_4, "./doc/heatmaps/heatmap_data_set_score_4.png",width = 10, height = 3, dpi=300)
# Add aminoacid type / call function aminoacid_type
data_set_1 <- data_set_1 %>%
mutate(aminoacid_class = aminoacid_type(mutation))
data_set_2 <- data_set_2 %>%
mutate(aminoacid_class = aminoacid_type(mutation))
data_set_3 <- data_set_3 %>%
mutate(aminoacid_class = aminoacid_type(mutation))
data_set_4 <- data_set_4 %>%
mutate(aminoacid_class = aminoacid_type(mutation))
# Score grouped heatmaps
# ------------------------------------------------------------------------------
heatmap_data_set_score_g_1 <- data_set_1 %>%
group_by(aminoacid_class) %>%
heatmap_g_score(score_min = 1, score_max = 10 )
heatmap_data_set_score_g_2 <- data_set_2 %>%
group_by(aminoacid_class) %>%
heatmap_g_score(score_min = 1, score_max = 10)
heatmap_data_set_score_g_3 <- data_set_3 %>%
group_by(aminoacid_class) %>%
heatmap_g_score(score_min = 0, score_max = 1)
heatmap_data_set_score_g_4 <- data_set_4 %>%
group_by(aminoacid_class) %>%
heatmap_g_score(score_min = -2, score_max = 2)
# Save heatmaps
# ----------------------------------------------------------------------------
ggsave(plot = heatmap_data_set_score_g_1, "./doc/heatmaps/heatmap_data_set_score_g_1.png",width = 10, height = 3, dpi=300)
ggsave(plot = heatmap_data_set_score_g_2, "./doc/heatmaps/heatmap_data_set_score_g_2.png",width = 10, height = 3, dpi=300)
ggsave(plot = heatmap_data_set_score_g_3, "./doc/heatmaps/heatmap_data_set_score_g_3.png",width = 10, height = 3, dpi=300)
ggsave(plot = heatmap_data_set_score_g_4, "./doc/heatmaps/heatmap_data_set_score_g_4.png",width = 10, height = 3, dpi=300)
#' @description
#' `quick_sar` makes a ggplot2 line plot based on a tibble
#'
#' @param df, tibble with score column and mutation_position columns
#'
#' @return density plot object
#'
#' @examples quick_sar(df)
quick_sar <- function(df, cutoff) {
df_eff <- df %>%
mutate(effective = case_when(score <= cutoff ~ 0,
score > cutoff ~ 1)) %>%
group_by(mutation_position) %>%
summarise(N_eff = sum(effective))
neff_plot <- df_eff %>%
ggplot(aes(x=mutation_position, y = N_eff)) +
geom_line() +
theme_classic() +
labs(x="Mutation position", y="Number of residues",title="Residues allowed per position in the sequence") +
theme(
panel.border = element_rect(colour = "black", fill = NA, size = 1),
axis.line = element_line(colour = "black", size = 0),
axis.text.x = element_text(face = "bold", color = "#000000"),
axis.text.y = element_text(face = "bold", color = "#000000")
)
return(neff_plot)
}
# Plot effective amino acids at each position with a cutoff
# ------------------------------------------------------------------------------
quick_sar_data_set_1 <- quick_sar(data_set_1, cutoff = 0.5)
# Save quickSAR plots
# ------------------------------------------------------------------------------
ggsave(plot = quick_sar_data_set_1, "./doc/quick_SAR/quick_sar_data_set_1.png")
# 04_quicksar.R
# ------------------------------------------------------------------------------
print('04_quicksar.R -> quickSARing data')
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Load libraries
# ------------------------------------------------------------------------------
library("tidyverse")
library("ggplot2")
library("UniprotR")
# Define functions
# ------------------------------------------------------------------------------
source(file = "./R/99_project_functions.R")
# Load data
# ------------------------------------------------------------------------------
data_set_1 <- read_tsv(file = "./data/03_aug_data_set_1.tsv")
data_set_2 <- read_tsv(file = "./data/03_aug_data_set_2.tsv")
data_set_3 <- read_tsv(file = "./data/03_aug_data_set_3.tsv")
data_set_4 <- read_tsv(file = "./data/03_aug_data_set_4.tsv")
data_set_4 <- data_set_4 %>%
drop_na(score)
data_set_3 <- data_set_3 %>%
drop_na(score)
# Plot effective amino acids at each position with a cutoff
# ------------------------------------------------------------------------------
quick_sar_data_set_1 <- quick_sar(data_set_1, cutoff = 0.5)
quick_sar_data_set_2 <- quick_sar(data_set_2, cutoff = 3)
quick_sar_data_set_3 <- quick_sar(data_set_3, cutoff = 0.6)
quick_sar_data_set_4 <- quick_sar(data_set_4, cutoff = 0)
# Save quickSAR plots
# ------------------------------------------------------------------------------
ggsave(plot = quick_sar_data_set_1, "./doc/quick_SAR/quick_sar_data_set_1.png",width = 10, height = 3, dpi=300)
ggsave(plot = quick_sar_data_set_2, "./doc/quick_SAR/quick_sar_data_set_2.png",width = 10, height = 3, dpi=300)
ggsave(plot = quick_sar_data_set_3, "./doc/quick_SAR/quick_sar_data_set_3.png",width = 10, height = 3, dpi=300)
ggsave(plot = quick_sar_data_set_4, "./doc/quick_SAR/quick_sar_data_set_4.png",width = 10, height = 3, dpi=300)
install.packages(c("rlang", "tensorflow", "tibble", "tidyr", "tinytex"))
update-tlmgr-latest
install.packages(c("rlang", "tensorflow", "tibble", "tidyr", "tinytex"))
install.packages("tinytex")
tinytex::reinstall_tinytex()
tinytex::tinytex_root())
tinytex::tinytex_root()
tinytex::latexmk()
tinytex::uninstall_tinytex()
